
Dashboard_Competition_Remake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a5c  08002a5c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002a5c  08002a5c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a5c  08002a5c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  200000b0  08002b14  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002b14  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a99d  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e72  00000000  00000000  0002aa76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174a2  00000000  00000000  0002dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2c6  00000000  00000000  00045382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087067  00000000  00000000  00051648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d86af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ecc  00000000  00000000  000d8700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080028ec 	.word	0x080028ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080028ec 	.word	0x080028ec

0800014c <Delay>:
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e00c      	b.n	8000174 <Delay+0x28>
	{
		for(j = 0; j<16000; j++){}
 800015a:	2300      	movs	r3, #0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	e002      	b.n	8000166 <Delay+0x1a>
 8000160:	897b      	ldrh	r3, [r7, #10]
 8000162:	3301      	adds	r3, #1
 8000164:	817b      	strh	r3, [r7, #10]
 8000166:	897b      	ldrh	r3, [r7, #10]
 8000168:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800016c:	d3f8      	bcc.n	8000160 <Delay+0x14>
	for (i = 0; i < counts; i++)
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3301      	adds	r3, #1
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	68fa      	ldr	r2, [r7, #12]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3ee      	bcc.n	800015a <Delay+0xe>
	}

}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <MicrosecondDelay>:
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts)
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++)
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	e00b      	b.n	80001ae <MicrosecondDelay+0x26>
	{
		for (j = 0; j<16; j++){}
 8000196:	2300      	movs	r3, #0
 8000198:	72fb      	strb	r3, [r7, #11]
 800019a:	e002      	b.n	80001a2 <MicrosecondDelay+0x1a>
 800019c:	7afb      	ldrb	r3, [r7, #11]
 800019e:	3301      	adds	r3, #1
 80001a0:	72fb      	strb	r3, [r7, #11]
 80001a2:	7afb      	ldrb	r3, [r7, #11]
 80001a4:	2b0f      	cmp	r3, #15
 80001a6:	d9f9      	bls.n	800019c <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++)
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fa      	ldr	r2, [r7, #12]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d3ef      	bcc.n	8000196 <MicrosecondDelay+0xe>
	}
}
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr

080001c2 <MoveCursor>:
  * Moves cursor to the position on the screen determined by XY Coordinates
  * @Param x: x-coordinate
  * @Param y: y-coordinate
  */
void MoveCursor(uint8_t x, uint8_t y)
{
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b084      	sub	sp, #16
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	4603      	mov	r3, r0
 80001ca:	460a      	mov	r2, r1
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	4613      	mov	r3, r2
 80001d0:	71bb      	strb	r3, [r7, #6]
     * Row major:
     * 0 1 2 3 4
     * 5 6 7 8 9
     *
     */
    uint16_t offset = 40*y + x;
 80001d2:	79bb      	ldrb	r3, [r7, #6]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	461a      	mov	r2, r3
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	4413      	add	r3, r2
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	b29a      	uxth	r2, r3
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	4413      	add	r3, r2
 80001e6:	81fb      	strh	r3, [r7, #14]

    TransmitCommand(0x46);
 80001e8:	2046      	movs	r0, #70	; 0x46
 80001ea:	f000 f9a3 	bl	8000534 <TransmitCommand>
    // The CSRW register is 2 bytes long, so the first parameter
    // is the first byte and the second parameter is the second
    // byte
    TransmitCommandParameter(offset&0xFF);
 80001ee:	89fb      	ldrh	r3, [r7, #14]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f9bc 	bl	8000570 <TransmitCommandParameter>
    TransmitCommandParameter(offset >> 8);
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	0a1b      	lsrs	r3, r3, #8
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f9b5 	bl	8000570 <TransmitCommandParameter>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <ClearScreen>:

 /**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen()
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b082      	sub	sp, #8
 8000212:	af00      	add	r7, sp, #0
    //Set cursor to start position
    MoveCursor(0, 0);
 8000214:	2100      	movs	r1, #0
 8000216:	2000      	movs	r0, #0
 8000218:	f7ff ffd3 	bl	80001c2 <MoveCursor>

    //replace all characters with spaces
    TransmitCommand(0x42);
 800021c:	2042      	movs	r0, #66	; 0x42
 800021e:	f000 f989 	bl	8000534 <TransmitCommand>
    for (uint16_t i = 0; i < 1200; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	80fb      	strh	r3, [r7, #6]
 8000226:	e005      	b.n	8000234 <ClearScreen+0x26>
    {
        TransmitCommandParameter(0x20);
 8000228:	2020      	movs	r0, #32
 800022a:	f000 f9a1 	bl	8000570 <TransmitCommandParameter>
    for (uint16_t i = 0; i < 1200; i++)
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	3301      	adds	r3, #1
 8000232:	80fb      	strh	r3, [r7, #6]
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800023a:	d3f5      	bcc.n	8000228 <ClearScreen+0x1a>
    }
    MoveCursor(0, 0);
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f7ff ffbf 	bl	80001c2 <MoveCursor>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <SaveCharacterToRAM>:
  * @Param bitmap: An array of the bitmap of that particular subcharacter
  * @Param offset: Some offset number
  * Returns: nothing
  */
void SaveCharacterToRAM(uint8_t* bitmap, uint8_t offset)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	70fb      	strb	r3, [r7, #3]
    TransmitCommand(0x46);
 8000258:	2046      	movs	r0, #70	; 0x46
 800025a:	f000 f96b 	bl	8000534 <TransmitCommand>
    TransmitCommandParameter(offset);
 800025e:	78fb      	ldrb	r3, [r7, #3]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f985 	bl	8000570 <TransmitCommandParameter>
    TransmitCommandParameter(0x48);
 8000266:	2048      	movs	r0, #72	; 0x48
 8000268:	f000 f982 	bl	8000570 <TransmitCommandParameter>
    TransmitCommand(0x42);
 800026c:	2042      	movs	r0, #66	; 0x42
 800026e:	f000 f961 	bl	8000534 <TransmitCommand>

    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	e009      	b.n	800028c <SaveCharacterToRAM+0x40>
    {
        TransmitCommandParameter(bitmap[i]);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f975 	bl	8000570 <TransmitCommandParameter>
    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	ddf2      	ble.n	8000278 <SaveCharacterToRAM+0x2c>
    }
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b0c2      	sub	sp, #264	; 0x108
 80002a0:	af00      	add	r7, sp, #0
    uint8_t bitmap[16][BYTEPERBITMAP] = {{0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E},
 80002a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002aa:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <CharacterBitMaps+0x78>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	4611      	mov	r1, r2
 80002b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b4:	461a      	mov	r2, r3
 80002b6:	f002 fb03 	bl	80028c0 <memcpy>
                                    {0x00, 0x62, 0x62, 0x62, 0x66, 0x66, 0x66, 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x60, 0x60, 0x00},
                                    {0x00, 0x60, 0x60, 0x70, 0x70, 0x78, 0x6C, 0x6C, 0x6C, 0x66, 0x66, 0x66, 0x67, 0x67, 0x61, 0x00},
                                    {0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x00},
                                    {0xC0, 0xE0, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06, 0x07, 0x03},
                                    {0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0}};
    TransmitCommand(0x5C);
 80002ba:	205c      	movs	r0, #92	; 0x5c
 80002bc:	f000 f93a 	bl	8000534 <TransmitCommand>
    TransmitCommandParameter(0x00);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f955 	bl	8000570 <TransmitCommandParameter>
    TransmitCommandParameter(0x40);
 80002c6:	2040      	movs	r0, #64	; 0x40
 80002c8:	f000 f952 	bl	8000570 <TransmitCommandParameter>
    TransmitCommand(0x4C);
 80002cc:	204c      	movs	r0, #76	; 0x4c
 80002ce:	f000 f931 	bl	8000534 <TransmitCommand>

    for (uint8_t i = 0; i < 16; i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80002d8:	e011      	b.n	80002fe <CharacterBitMaps+0x62>
    {
        SaveCharacterToRAM(bitmap[i], i*BYTEPERBITMAP);
 80002da:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002de:	1d3a      	adds	r2, r7, #4
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	441a      	add	r2, r3
 80002e4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f7ff ffac 	bl	800024c <SaveCharacterToRAM>
    for (uint8_t i = 0; i < 16; i++)
 80002f4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002f8:	3301      	adds	r3, #1
 80002fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80002fe:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000302:	2b0f      	cmp	r3, #15
 8000304:	d9e9      	bls.n	80002da <CharacterBitMaps+0x3e>
    }
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	08002904 	.word	0x08002904

08000318 <OutputString>:
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]
                        {0x82,0x86,0x80,0x81}, {0x86,0x83,0x20,0x89}, {0x80,0x81,0x84,0x85}, {0x80,0x81,0x20,0x89}, //6 7 8 9
                        {0x20,0x20,0x20,0x20}, {0x20,0x20,0x2E,0x20}, {0x2E,0x20,0x2E,0x20}, {0x87,0x87,0x86,0x86}, //SPACE, ., :, -
                        };

    uint8_t temp;
    uint8_t x = starting_x;
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	73bb      	strb	r3, [r7, #14]

    TransmitCommand(0x4C);                                  //Set the cursor direction to "Right"
 800032c:	204c      	movs	r0, #76	; 0x4c
 800032e:	f000 f901 	bl	8000534 <TransmitCommand>

    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 8000332:	2300      	movs	r3, #0
 8000334:	737b      	strb	r3, [r7, #13]
 8000336:	e069      	b.n	800040c <OutputString+0xf4>
    {
        MoveCursor(x, starting_y);
 8000338:	78ba      	ldrb	r2, [r7, #2]
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	4611      	mov	r1, r2
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff3f 	bl	80001c2 <MoveCursor>
        temp = (uint8_t) Str[c];
 8000344:	7b7b      	ldrb	r3, [r7, #13]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	73fb      	strb	r3, [r7, #15]
        if (temp == 32)
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	2b20      	cmp	r3, #32
 8000352:	d102      	bne.n	800035a <OutputString+0x42>
        {
            temp = 36;                  //if character is " "
 8000354:	2324      	movs	r3, #36	; 0x24
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e025      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp == 58)
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2b3a      	cmp	r3, #58	; 0x3a
 800035e:	d102      	bne.n	8000366 <OutputString+0x4e>
        {
            temp = 38;                  //if character is ":"
 8000360:	2326      	movs	r3, #38	; 0x26
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	e01f      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp == 46)
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	2b2e      	cmp	r3, #46	; 0x2e
 800036a:	d102      	bne.n	8000372 <OutputString+0x5a>
        {
            temp = 37;                  //if character is "."
 800036c:	2325      	movs	r3, #37	; 0x25
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	e019      	b.n	80003a6 <OutputString+0x8e>
        }
		else if (temp == 45)
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	2b2d      	cmp	r3, #45	; 0x2d
 8000376:	d102      	bne.n	800037e <OutputString+0x66>
		{
			temp = 39;	                //if character is "-"
 8000378:	2327      	movs	r3, #39	; 0x27
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e013      	b.n	80003a6 <OutputString+0x8e>
		}
        else if (temp <= 57)
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	2b39      	cmp	r3, #57	; 0x39
 8000382:	d803      	bhi.n	800038c <OutputString+0x74>
        {
            temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	3b16      	subs	r3, #22
 8000388:	73fb      	strb	r3, [r7, #15]
 800038a:	e00c      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp <= 90)
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	2b5a      	cmp	r3, #90	; 0x5a
 8000390:	d803      	bhi.n	800039a <OutputString+0x82>
        {
            temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	3b41      	subs	r3, #65	; 0x41
 8000396:	73fb      	strb	r3, [r7, #15]
 8000398:	e005      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp <= 122)
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	2b7a      	cmp	r3, #122	; 0x7a
 800039e:	d802      	bhi.n	80003a6 <OutputString+0x8e>
        {
            temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	3b61      	subs	r3, #97	; 0x61
 80003a4:	73fb      	strb	r3, [r7, #15]
        * |C D|
        *  - -
        * (4 subcharacters, in that order)     *
        ***********************************/

        TransmitCommand(0x42);                                  //print subcharacers A and B
 80003a6:	2042      	movs	r0, #66	; 0x42
 80003a8:	f000 f8c4 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <OutputString+0x10c>)
 80003b0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f8db 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <OutputString+0x10c>)
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 f8d3 	bl	8000570 <TransmitCommandParameter>

        MoveCursor(x, starting_y + 1);
 80003ca:	78bb      	ldrb	r3, [r7, #2]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	4611      	mov	r1, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff fef4 	bl	80001c2 <MoveCursor>

        TransmitCommand(0x42);                                  //print the subcharacters C and D
 80003da:	2042      	movs	r0, #66	; 0x42
 80003dc:	f000 f8aa 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <OutputString+0x10c>)
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f8c0 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <OutputString+0x10c>)
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	78db      	ldrb	r3, [r3, #3]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f8b8 	bl	8000570 <TransmitCommandParameter>

        x += 3;
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	3303      	adds	r3, #3
 8000404:	73bb      	strb	r3, [r7, #14]
    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 8000406:	7b7b      	ldrb	r3, [r7, #13]
 8000408:	3301      	adds	r3, #1
 800040a:	737b      	strb	r3, [r7, #13]
 800040c:	7b7b      	ldrb	r3, [r7, #13]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	7b7a      	ldrb	r2, [r7, #13]
 8000416:	429a      	cmp	r2, r3
 8000418:	d38e      	bcc.n	8000338 <OutputString+0x20>
    }
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000000 	.word	0x20000000

08000428 <DisplayScreen>:

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	//Clears the screen
    ClearScreen();
 800042c:	f7ff feef 	bl	800020e <ClearScreen>

	//COLUMN 1

	//Battery Pack Current(BMS)
	OutputString("-000.0", BATTERY_CURRENT_XPOS, BATTERY_CURRENT_YPOS);
 8000430:	2200      	movs	r2, #0
 8000432:	2100      	movs	r1, #0
 8000434:	482f      	ldr	r0, [pc, #188]	; (80004f4 <DisplayScreen+0xcc>)
 8000436:	f7ff ff6f 	bl	8000318 <OutputString>
	OutputString("A", BATTERY_CURRENT_UNIT_XPOS, BATTERY_CURRENT_UNIT_YPOS);
 800043a:	2200      	movs	r2, #0
 800043c:	2112      	movs	r1, #18
 800043e:	482e      	ldr	r0, [pc, #184]	; (80004f8 <DisplayScreen+0xd0>)
 8000440:	f7ff ff6a 	bl	8000318 <OutputString>

	//Battery Pack Voltage(BMS)
	OutputString("-000.0", BATTERY_VOLTAGE_XPOS, BATTERY_VOLTAGE_YPOS);
 8000444:	2203      	movs	r2, #3
 8000446:	2100      	movs	r1, #0
 8000448:	482a      	ldr	r0, [pc, #168]	; (80004f4 <DisplayScreen+0xcc>)
 800044a:	f7ff ff65 	bl	8000318 <OutputString>
	OutputString("V", BATTERY_VOLTAGE_UNIT_XPOS, BATTERY_VOLTAGE_UNIT_YPOS);
 800044e:	2203      	movs	r2, #3
 8000450:	2112      	movs	r1, #18
 8000452:	482a      	ldr	r0, [pc, #168]	; (80004fc <DisplayScreen+0xd4>)
 8000454:	f7ff ff60 	bl	8000318 <OutputString>

	//Motor Current(Motor Controller)
	OutputString("-000.0", MOTOR_CURRENT_XPOS, MOTOR_CURRENT_YPOS);
 8000458:	2206      	movs	r2, #6
 800045a:	2100      	movs	r1, #0
 800045c:	4825      	ldr	r0, [pc, #148]	; (80004f4 <DisplayScreen+0xcc>)
 800045e:	f7ff ff5b 	bl	8000318 <OutputString>
	OutputString("A", MOTOR_CURRENT_UNIT_XPOS, MOTOR_CURRENT_UNIT_YPOS);
 8000462:	2206      	movs	r2, #6
 8000464:	2112      	movs	r1, #18
 8000466:	4824      	ldr	r0, [pc, #144]	; (80004f8 <DisplayScreen+0xd0>)
 8000468:	f7ff ff56 	bl	8000318 <OutputString>

	//MDU Temperature(Motor Controller)
	OutputString("-000.0", MOTOR_TEMP_XPOS, MOTOR_TEMP_YPOS);
 800046c:	2209      	movs	r2, #9
 800046e:	2100      	movs	r1, #0
 8000470:	4820      	ldr	r0, [pc, #128]	; (80004f4 <DisplayScreen+0xcc>)
 8000472:	f7ff ff51 	bl	8000318 <OutputString>
	OutputString("C", MOTOR_TEMP_UNIT_XPOS, MOTOR_TEMP_UNIT_YPOS);
 8000476:	2209      	movs	r2, #9
 8000478:	2112      	movs	r1, #18
 800047a:	4821      	ldr	r0, [pc, #132]	; (8000500 <DisplayScreen+0xd8>)
 800047c:	f7ff ff4c 	bl	8000318 <OutputString>

	//Vehicle Speed(Motor Controller)
	OutputString("-000.0", MOTOR_SPEED_XPOS, MOTOR_SPEED_YPOS);
 8000480:	220c      	movs	r2, #12
 8000482:	2100      	movs	r1, #0
 8000484:	481b      	ldr	r0, [pc, #108]	; (80004f4 <DisplayScreen+0xcc>)
 8000486:	f7ff ff47 	bl	8000318 <OutputString>
	OutputString("KH", MOTOR_SPEED_UNIT_XPOS, MOTOR_SPEED_UNIT_YPOS);
 800048a:	220c      	movs	r2, #12
 800048c:	2112      	movs	r1, #18
 800048e:	481d      	ldr	r0, [pc, #116]	; (8000504 <DisplayScreen+0xdc>)
 8000490:	f7ff ff42 	bl	8000318 <OutputString>

	//COLUMN 2

	//Minimum cell voltage in the Battery(BMS)
	OutputString("-000.0", BATTERY_MINVOLT_XPOS, BATTERY_MINVOLT_YPOS);
 8000494:	2200      	movs	r2, #0
 8000496:	2114      	movs	r1, #20
 8000498:	4816      	ldr	r0, [pc, #88]	; (80004f4 <DisplayScreen+0xcc>)
 800049a:	f7ff ff3d 	bl	8000318 <OutputString>
	OutputString("V", BATTERY_MINVOLT_UNIT_XPOS, BATTERY_MINVOLT_UNIT_YPOS);
 800049e:	2200      	movs	r2, #0
 80004a0:	2125      	movs	r1, #37	; 0x25
 80004a2:	4816      	ldr	r0, [pc, #88]	; (80004fc <DisplayScreen+0xd4>)
 80004a4:	f7ff ff38 	bl	8000318 <OutputString>

	//Maximum cell voltage in the Battery(BMS)
	OutputString("-000.0", BATTERY_MAXVOLT_XPOS, BATTERY_MAXVOLT_YPOS);
 80004a8:	2203      	movs	r2, #3
 80004aa:	2114      	movs	r1, #20
 80004ac:	4811      	ldr	r0, [pc, #68]	; (80004f4 <DisplayScreen+0xcc>)
 80004ae:	f7ff ff33 	bl	8000318 <OutputString>
	OutputString("V", BATTERY_MAXVOLT_UNIT_XPOS, BATTERY_MAXVOLT_UNIT_YPOS);
 80004b2:	2203      	movs	r2, #3
 80004b4:	2125      	movs	r1, #37	; 0x25
 80004b6:	4811      	ldr	r0, [pc, #68]	; (80004fc <DisplayScreen+0xd4>)
 80004b8:	f7ff ff2e 	bl	8000318 <OutputString>

	//Supplemental Battery Voltage(BMS)
	OutputString("-000.0", BATTERY_SUPPVOLT_XPOS, BATTERY_SUPPVOLT_YPOS);
 80004bc:	2206      	movs	r2, #6
 80004be:	2114      	movs	r1, #20
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <DisplayScreen+0xcc>)
 80004c2:	f7ff ff29 	bl	8000318 <OutputString>
	OutputString("V", BATTERY_SUPPVOLT_UNIT_XPOS, BATTERY_SUPPVOLT_UNIT_YPOS);
 80004c6:	2206      	movs	r2, #6
 80004c8:	2125      	movs	r1, #37	; 0x25
 80004ca:	480c      	ldr	r0, [pc, #48]	; (80004fc <DisplayScreen+0xd4>)
 80004cc:	f7ff ff24 	bl	8000318 <OutputString>

	//Maximum Temperature in the Battery(BMS)
	OutputString("-000.0", BATTERY_MAXTEMP_XPOS, BATTERY_MAXTEMP_YPOS);
 80004d0:	2209      	movs	r2, #9
 80004d2:	2114      	movs	r1, #20
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <DisplayScreen+0xcc>)
 80004d6:	f7ff ff1f 	bl	8000318 <OutputString>
	OutputString("C", BATTERY_MAXTEMP_UNIT_XPOS, BATTERY_MAXTEMP_UNIT_YPOS);
 80004da:	2209      	movs	r2, #9
 80004dc:	2125      	movs	r1, #37	; 0x25
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <DisplayScreen+0xd8>)
 80004e0:	f7ff ff1a 	bl	8000318 <OutputString>

	//State of charge percentage
	OutputString("-000.0", BATTERY_CHARGE_XPOS, BATTERY_CHARGE_YPOS);
 80004e4:	220c      	movs	r2, #12
 80004e6:	2116      	movs	r1, #22
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <DisplayScreen+0xcc>)
 80004ea:	f7ff ff15 	bl	8000318 <OutputString>

	//DEPRECATED
	//State of Charge Bar in percentage (BMS)
	//SetBar(100, 100, CHARGE_BAR_YPOS);

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	08002a1c 	.word	0x08002a1c
 80004f8:	08002a24 	.word	0x08002a24
 80004fc:	08002a28 	.word	0x08002a28
 8000500:	08002a2c 	.word	0x08002a2c
 8000504:	08002a30 	.word	0x08002a30

08000508 <WriteByteToDataBus>:
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	00da      	lsls	r2, r3, #3
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <WriteByteToDataBus+0x28>)
 8000518:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	43db      	mvns	r3, r3
 800051e:	b2db      	uxtb	r3, r3
 8000520:	00da      	lsls	r2, r3, #3
 8000522:	4b03      	ldr	r3, [pc, #12]	; (8000530 <WriteByteToDataBus+0x28>)
 8000524:	615a      	str	r2, [r3, #20]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40011000 	.word	0x40011000

08000534 <TransmitCommand>:
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;					//SET C0 to HIGH
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <TransmitCommand+0x38>)
 8000540:	2201      	movs	r2, #1
 8000542:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <TransmitCommand+0x38>)
 8000546:	2202      	movs	r2, #2
 8000548:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffdb 	bl	8000508 <WriteByteToDataBus>
	MicrosecondDelay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff fe18 	bl	8000188 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <TransmitCommand+0x38>)
 800055a:	2202      	movs	r2, #2
 800055c:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fe12 	bl	8000188 <MicrosecondDelay>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40011000 	.word	0x40011000

08000570 <TransmitCommandParameter>:
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;					//SET C0 to LOW
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <TransmitCommandParameter+0x38>)
 800057c:	2201      	movs	r2, #1
 800057e:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <TransmitCommandParameter+0x38>)
 8000582:	2202      	movs	r2, #2
 8000584:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ffbd 	bl	8000508 <WriteByteToDataBus>
	MicrosecondDelay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff fdfa 	bl	8000188 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <TransmitCommandParameter+0x38>)
 8000596:	2202      	movs	r2, #2
 8000598:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff fdf4 	bl	8000188 <MicrosecondDelay>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40011000 	.word	0x40011000

080005ac <ScreenSetup>:

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    // system setup (section 6-2-1 on raio datasheet)
    TransmitCommand(0x40);
 80005b0:	2040      	movs	r0, #64	; 0x40
 80005b2:	f7ff ffbf 	bl	8000534 <TransmitCommand>
        Delay(5);
 80005b6:	2005      	movs	r0, #5
 80005b8:	f7ff fdc8 	bl	800014c <Delay>
        // 0 0 IV 1 W/S M2 M1 M0
        TransmitCommandParameter(0x34);
 80005bc:	2034      	movs	r0, #52	; 0x34
 80005be:	f7ff ffd7 	bl	8000570 <TransmitCommandParameter>
        // WF 0 0 0 0 FX FX FX
        TransmitCommandParameter(0x87);
 80005c2:	2087      	movs	r0, #135	; 0x87
 80005c4:	f7ff ffd4 	bl	8000570 <TransmitCommandParameter>
        // 0 0 0 0 FY FY FY FY
        TransmitCommandParameter(0xF);
 80005c8:	200f      	movs	r0, #15
 80005ca:	f7ff ffd1 	bl	8000570 <TransmitCommandParameter>
        // C/R (horizontal bytes per line)
        TransmitCommandParameter(39);
 80005ce:	2027      	movs	r0, #39	; 0x27
 80005d0:	f7ff ffce 	bl	8000570 <TransmitCommandParameter>
        // TC/R (horizontal bytes per line, incl blanking)
        TransmitCommandParameter(47);
 80005d4:	202f      	movs	r0, #47	; 0x2f
 80005d6:	f7ff ffcb 	bl	8000570 <TransmitCommandParameter>
        // L/F (lines per frame)
        TransmitCommandParameter(239);
 80005da:	20ef      	movs	r0, #239	; 0xef
 80005dc:	f7ff ffc8 	bl	8000570 <TransmitCommandParameter>
        // APL (horizontal address range, LSB)
        TransmitCommandParameter(40);
 80005e0:	2028      	movs	r0, #40	; 0x28
 80005e2:	f7ff ffc5 	bl	8000570 <TransmitCommandParameter>
        // APH (horizontal address range, MSB)
        TransmitCommandParameter(0);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ffc2 	bl	8000570 <TransmitCommandParameter>

    // scroll parameters
    TransmitCommand(0x44);
 80005ec:	2044      	movs	r0, #68	; 0x44
 80005ee:	f7ff ffa1 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(0); // SAD 1L
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff ffbc 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 1H
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ffb9 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL1
 80005fe:	20f0      	movs	r0, #240	; 0xf0
 8000600:	f7ff ffb6 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(176); // SAD 2L
 8000604:	20b0      	movs	r0, #176	; 0xb0
 8000606:	f7ff ffb3 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(4); // SAD 2H
 800060a:	2004      	movs	r0, #4
 800060c:	f7ff ffb0 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL2
 8000610:	20f0      	movs	r0, #240	; 0xf0
 8000612:	f7ff ffad 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3L
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffaa 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3H
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff ffa7 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ffa4 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff ffa1 	bl	8000570 <TransmitCommandParameter>

	TransmitCommand(0x5B);
 800062e:	205b      	movs	r0, #91	; 0x5b
 8000630:	f7ff ff80 	bl	8000534 <TransmitCommand>
		TransmitCommandParameter(0);
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ff9b 	bl	8000570 <TransmitCommandParameter>

    // set horizontal scroll position
    TransmitCommand(0x5A);
 800063a:	205a      	movs	r0, #90	; 0x5a
 800063c:	f7ff ff7a 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(0);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ff95 	bl	8000570 <TransmitCommandParameter>

    // set display overlay format
    TransmitCommand(0x5B);
 8000646:	205b      	movs	r0, #91	; 0x5b
 8000648:	f7ff ff74 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff ff8f 	bl	8000570 <TransmitCommandParameter>

    // turn off the display and configure cursor
    TransmitCommand(0x58);
 8000652:	2058      	movs	r0, #88	; 0x58
 8000654:	f7ff ff6e 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(0x57);
 8000658:	2057      	movs	r0, #87	; 0x57
 800065a:	f7ff ff89 	bl	8000570 <TransmitCommandParameter>

    // set cursor size & type
    TransmitCommand(0x5D);
 800065e:	205d      	movs	r0, #93	; 0x5d
 8000660:	f7ff ff68 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(4);
 8000664:	2004      	movs	r0, #4
 8000666:	f7ff ff83 	bl	8000570 <TransmitCommandParameter>
        TransmitCommandParameter(0x84);
 800066a:	2084      	movs	r0, #132	; 0x84
 800066c:	f7ff ff80 	bl	8000570 <TransmitCommandParameter>

    // set cursor direction
    TransmitCommand(0x4C);
 8000670:	204c      	movs	r0, #76	; 0x4c
 8000672:	f7ff ff5f 	bl	8000534 <TransmitCommand>

    // turn on the display and configure cursor
    TransmitCommand(0x59);
 8000676:	2059      	movs	r0, #89	; 0x59
 8000678:	f7ff ff5c 	bl	8000534 <TransmitCommand>
        TransmitCommandParameter(0x7);
 800067c:	2007      	movs	r0, #7
 800067e:	f7ff ff77 	bl	8000570 <TransmitCommandParameter>

    CharacterBitMaps();
 8000682:	f7ff fe0b 	bl	800029c <CharacterBitMaps>
	DisplayScreen();
 8000686:	f7ff fecf 	bl	8000428 <DisplayScreen>

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_CAN_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_CAN_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_CAN_Init+0x64>)
 800069c:	2204      	movs	r2, #4
 800069e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_CAN_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_CAN_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_CAN_Init+0x64>)
 80006ae:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80006b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_CAN_Init+0x64>)
 80006b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_CAN_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_CAN_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_CAN_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_CAN_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_CAN_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_CAN_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_CAN_Init+0x64>)
 80006e2:	f000 fafb 	bl	8000cdc <HAL_CAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f95f 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000cc 	.word	0x200000cc
 80006f8:	40006400 	.word	0x40006400

080006fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a29      	ldr	r2, [pc, #164]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d14b      	bne.n	80007b4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	61d3      	str	r3, [r2, #28]
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800074c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <HAL_CAN_MspInit+0xc8>)
 8000762:	f000 fef1 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <HAL_CAN_MspInit+0xc8>)
 800077c:	f000 fee4 	bl	8001548 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_CAN_MspInit+0xcc>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_CAN_MspInit+0xcc>)
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2014      	movs	r0, #20
 80007aa:	f000 fe96 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007ae:	2014      	movs	r0, #20
 80007b0:	f000 feaf 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40006400 	.word	0x40006400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010c00 	.word	0x40010c00
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0xb4>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <MX_GPIO_Init+0xb4>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0xb4>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000828:	2200      	movs	r2, #0
 800082a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0xb8>)
 8000830:	f001 f80e 	bl	8001850 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_Pin|A6_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2160      	movs	r1, #96	; 0x60
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_GPIO_Init+0xbc>)
 800083a:	f001 f809 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 800083e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000842:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0xb8>)
 8000858:	f000 fe76 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|A6_Pin;
 800085c:	2360      	movs	r3, #96	; 0x60
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0xbc>)
 8000874:	f000 fe68 	bl	8001548 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	40011000 	.word	0x40011000
 8000888:	40010800 	.word	0x40010800

0800088c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// TIM5 interrupt function for period elapsing (HAL page 1018)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	// EXPECTED PERIOD: the callback will be invoked every X seconds

	// Check if the correct timer is triggering the interrupt
	if (htim == &htim2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d103      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		// Blink on board LED
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008a0:	f000 ffee 	bl	8001880 <HAL_GPIO_TogglePin>
	}
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000f4 	.word	0x200000f4
 80008b0:	40010800 	.word	0x40010800

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int32_t tempInt32;
  uint8_t c = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	71fb      	strb	r3, [r7, #7]
  uint8_t d = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 f985 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f831 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f7ff ff7f 	bl	80007cc <MX_GPIO_Init>
  MX_CAN_Init();
 80008ce:	f7ff fedf 	bl	8000690 <MX_CAN_Init>
  MX_TIM2_Init();
 80008d2:	f000 f8e5 	bl	8000aa0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// Start timer for using interrupts (HAL page 1015)
	HAL_TIM_Base_Start_IT(&htim2);
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <main+0x6c>)
 80008d8:	f001 fc24 	bl	8002124 <HAL_TIM_Base_Start_IT>
//	GPIOC->CRH &= 0;
//	GPIOC->CRL |= 0x33333333UL; //Initialise C0 to C7
//	GPIOC->CRH |= 0x33333UL; //Initialise C8 to C12

	//Set Pin initial values
	GPIOC->BSRR = 0x1UL << 0;	 // C0 HIGH
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <main+0x70>)
 80008de:	2201      	movs	r2, #1
 80008e0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = 0x1UL << 1;	 // C1 HIGH
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <main+0x70>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = 0x1UL << 2;	 // C2 HIGH
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <main+0x70>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 11;	 // C11 LOW
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <main+0x70>)
 80008f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f4:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = 0x1UL << 12;   //C12 HIGH
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <main+0x70>)
 80008f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fc:	611a      	str	r2, [r3, #16]

  ScreenSetup();
 80008fe:	f7ff fe55 	bl	80005ac <ScreenSetup>
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2120      	movs	r1, #32
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <main+0x74>)
 8000908:	f000 ffa2 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f000 f9c0 	bl	8000c94 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2120      	movs	r1, #32
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <main+0x74>)
 800091a:	f000 ff99 	bl	8001850 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	e7fe      	b.n	800091e <main+0x6a>
 8000920:	200000f4 	.word	0x200000f4
 8000924:	40011000 	.word	0x40011000
 8000928:	40010800 	.word	0x40010800

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	; 0x40
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	2228      	movs	r2, #40	; 0x28
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 ffce 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000956:	2310      	movs	r3, #16
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800095e:	2300      	movs	r3, #0
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000962:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4618      	mov	r0, r3
 800096e:	f000 ffa1 	bl	80018b4 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000978:	f000 f819 	bl	80009ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fa0e 	bl	8001db8 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009a2:	f000 f804 	bl	80009ae <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3740      	adds	r7, #64	; 0x40
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b2:	b672      	cpsid	i
}
 80009b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x5c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_MspInit+0x60>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_MspInit+0x60>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f8fb 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a72:	f000 fa2e 	bl	8000ed2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000cc 	.word	0x200000cc

08000a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <TIM2_IRQHandler+0x10>)
 8000a86:	f001 fb9f 	bl	80021c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000f4 	.word	0x200000f4

08000a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ac6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000aca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ad4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ae8:	f001 facc 	bl	8002084 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000af2:	f7ff ff5c 	bl	80009ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000b04:	f001 fc68 	bl	80023d8 <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0e:	f7ff ff4e 	bl	80009ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000b20:	f001 fe3a 	bl	8002798 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b2a:	f7ff ff40 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000f4 	.word	0x200000f4

08000b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b4c:	d113      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_TIM_Base_MspInit+0x44>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_TIM_Base_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_TIM_Base_MspInit+0x44>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	201c      	movs	r0, #28
 8000b6c:	f000 fcb5 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b70:	201c      	movs	r0, #28
 8000b72:	f000 fcce 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000baa:	f7ff ff73 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f001 fe63 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fe7f 	bl	80008b4 <main>
  bx lr
 8000bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000bc0:	08002a64 	.word	0x08002a64
  ldr r2, =_sbss
 8000bc4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000bc8:	20000140 	.word	0x20000140

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 fc6f 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fee4 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fc87 	bl	800152e <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 fc4f 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000a4 	.word	0x200000a4
 8000c54:	200000ac 	.word	0x200000ac
 8000c58:	200000a8 	.word	0x200000a8

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	200000ac 	.word	0x200000ac
 8000c7c:	2000013c 	.word	0x2000013c

08000c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	2000013c 	.word	0x2000013c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffe0 	bl	8000c80 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000ac 	.word	0x200000ac

08000cdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0ed      	b.n	8000eca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fcfe 	bl	80006fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d10:	f7ff ffb6 	bl	8000c80 <HAL_GetTick>
 8000d14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d16:	e012      	b.n	8000d3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d18:	f7ff ffb2 	bl	8000c80 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b0a      	cmp	r3, #10
 8000d24:	d90b      	bls.n	8000d3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2205      	movs	r2, #5
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0c5      	b.n	8000eca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0e5      	beq.n	8000d18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0202 	bic.w	r2, r2, #2
 8000d5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d5c:	f7ff ff90 	bl	8000c80 <HAL_GetTick>
 8000d60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d62:	e012      	b.n	8000d8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d64:	f7ff ff8c 	bl	8000c80 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b0a      	cmp	r3, #10
 8000d70:	d90b      	bls.n	8000d8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e09f      	b.n	8000eca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1e5      	bne.n	8000d64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e1b      	ldrb	r3, [r3, #24]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d108      	bne.n	8000db2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e007      	b.n	8000dc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7e5b      	ldrb	r3, [r3, #25]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e007      	b.n	8000dec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7e9b      	ldrb	r3, [r3, #26]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d108      	bne.n	8000e06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0220 	orr.w	r2, r2, #32
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e007      	b.n	8000e16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0220 	bic.w	r2, r2, #32
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7edb      	ldrb	r3, [r3, #27]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0210 	bic.w	r2, r2, #16
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0210 	orr.w	r2, r2, #16
 8000e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7f1b      	ldrb	r3, [r3, #28]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d108      	bne.n	8000e5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0208 	orr.w	r2, r2, #8
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0208 	bic.w	r2, r2, #8
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7f5b      	ldrb	r3, [r3, #29]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d108      	bne.n	8000e84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0204 	orr.w	r2, r2, #4
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0204 	bic.w	r2, r2, #4
 8000e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	ea42 0103 	orr.w	r1, r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b08a      	sub	sp, #40	; 0x28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d07c      	beq.n	8001012 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d023      	beq.n	8000f6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f983 	bl	8001240 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f3a:	e016      	b.n	8000f6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	e00c      	b.n	8000f6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d004      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	e002      	b.n	8000f6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f986 	bl	8001276 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d024      	beq.n	8000fbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f962 	bl	8001252 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f8e:	e016      	b.n	8000fbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	e00c      	b.n	8000fbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	e002      	b.n	8000fbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f965 	bl	8001288 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d024      	beq.n	8001012 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f941 	bl	8001264 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fe2:	e016      	b.n	8001012 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e00c      	b.n	8001012 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e002      	b.n	8001012 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f944 	bl	800129a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2210      	movs	r2, #16
 8001034:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2208      	movs	r2, #8
 8001050:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f933 	bl	80012be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f91b 	bl	80012ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001090:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2210      	movs	r2, #16
 8001098:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0320 	and.w	r3, r3, #32
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2208      	movs	r2, #8
 80010b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f913 	bl	80012e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d009      	beq.n	80010da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f8fb 	bl	80012d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00b      	beq.n	80010fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2210      	movs	r2, #16
 80010f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8fc 	bl	80012f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2208      	movs	r2, #8
 8001116:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f8f4 	bl	8001306 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d07b      	beq.n	8001220 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d072      	beq.n	8001218 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118c:	2b00      	cmp	r3, #0
 800118e:	d043      	beq.n	8001218 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001196:	2b00      	cmp	r3, #0
 8001198:	d03e      	beq.n	8001218 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011a0:	2b60      	cmp	r3, #96	; 0x60
 80011a2:	d02b      	beq.n	80011fc <HAL_CAN_IRQHandler+0x32a>
 80011a4:	2b60      	cmp	r3, #96	; 0x60
 80011a6:	d82e      	bhi.n	8001206 <HAL_CAN_IRQHandler+0x334>
 80011a8:	2b50      	cmp	r3, #80	; 0x50
 80011aa:	d022      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x320>
 80011ac:	2b50      	cmp	r3, #80	; 0x50
 80011ae:	d82a      	bhi.n	8001206 <HAL_CAN_IRQHandler+0x334>
 80011b0:	2b40      	cmp	r3, #64	; 0x40
 80011b2:	d019      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x316>
 80011b4:	2b40      	cmp	r3, #64	; 0x40
 80011b6:	d826      	bhi.n	8001206 <HAL_CAN_IRQHandler+0x334>
 80011b8:	2b30      	cmp	r3, #48	; 0x30
 80011ba:	d010      	beq.n	80011de <HAL_CAN_IRQHandler+0x30c>
 80011bc:	2b30      	cmp	r3, #48	; 0x30
 80011be:	d822      	bhi.n	8001206 <HAL_CAN_IRQHandler+0x334>
 80011c0:	2b10      	cmp	r3, #16
 80011c2:	d002      	beq.n	80011ca <HAL_CAN_IRQHandler+0x2f8>
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d005      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011c8:	e01d      	b.n	8001206 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011d2:	e019      	b.n	8001208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011dc:	e014      	b.n	8001208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011e6:	e00f      	b.n	8001208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011f0:	e00a      	b.n	8001208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011fa:	e005      	b.n	8001208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001204:	e000      	b.n	8001208 <HAL_CAN_IRQHandler+0x336>
            break;
 8001206:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001216:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2204      	movs	r2, #4
 800121e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	2b00      	cmp	r3, #0
 8001224:	d008      	beq.n	8001238 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f870 	bl	8001318 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
	...

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4906      	ldr	r1, [pc, #24]	; (80013c4 <__NVIC_EnableIRQ+0x34>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff90 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff2d 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff42 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff35 	bl	8001390 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e169      	b.n	8001830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800155c:	2201      	movs	r2, #1
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 8158 	bne.w	800182a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a9a      	ldr	r2, [pc, #616]	; (80017e8 <HAL_GPIO_Init+0x2a0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d05e      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 8001584:	4a98      	ldr	r2, [pc, #608]	; (80017e8 <HAL_GPIO_Init+0x2a0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d875      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 800158a:	4a98      	ldr	r2, [pc, #608]	; (80017ec <HAL_GPIO_Init+0x2a4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d058      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 8001590:	4a96      	ldr	r2, [pc, #600]	; (80017ec <HAL_GPIO_Init+0x2a4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d86f      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 8001596:	4a96      	ldr	r2, [pc, #600]	; (80017f0 <HAL_GPIO_Init+0x2a8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d052      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 800159c:	4a94      	ldr	r2, [pc, #592]	; (80017f0 <HAL_GPIO_Init+0x2a8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d869      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015a2:	4a94      	ldr	r2, [pc, #592]	; (80017f4 <HAL_GPIO_Init+0x2ac>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d04c      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 80015a8:	4a92      	ldr	r2, [pc, #584]	; (80017f4 <HAL_GPIO_Init+0x2ac>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d863      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015ae:	4a92      	ldr	r2, [pc, #584]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d046      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 80015b4:	4a90      	ldr	r2, [pc, #576]	; (80017f8 <HAL_GPIO_Init+0x2b0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d85d      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d82a      	bhi.n	8001614 <HAL_GPIO_Init+0xcc>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d859      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015c2:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <HAL_GPIO_Init+0x80>)
 80015c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c8:	08001643 	.word	0x08001643
 80015cc:	0800161d 	.word	0x0800161d
 80015d0:	0800162f 	.word	0x0800162f
 80015d4:	08001671 	.word	0x08001671
 80015d8:	08001677 	.word	0x08001677
 80015dc:	08001677 	.word	0x08001677
 80015e0:	08001677 	.word	0x08001677
 80015e4:	08001677 	.word	0x08001677
 80015e8:	08001677 	.word	0x08001677
 80015ec:	08001677 	.word	0x08001677
 80015f0:	08001677 	.word	0x08001677
 80015f4:	08001677 	.word	0x08001677
 80015f8:	08001677 	.word	0x08001677
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001677 	.word	0x08001677
 8001604:	08001677 	.word	0x08001677
 8001608:	08001677 	.word	0x08001677
 800160c:	08001625 	.word	0x08001625
 8001610:	08001639 	.word	0x08001639
 8001614:	4a79      	ldr	r2, [pc, #484]	; (80017fc <HAL_GPIO_Init+0x2b4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161a:	e02c      	b.n	8001676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e029      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	3304      	adds	r3, #4
 800162a:	623b      	str	r3, [r7, #32]
          break;
 800162c:	e024      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	3308      	adds	r3, #8
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e01f      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	330c      	adds	r3, #12
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e01a      	b.n	8001678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164a:	2304      	movs	r3, #4
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e013      	b.n	8001678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	611a      	str	r2, [r3, #16]
          break;
 8001662:	e009      	b.n	8001678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001664:	2308      	movs	r3, #8
 8001666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	615a      	str	r2, [r3, #20]
          break;
 800166e:	e003      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x130>
          break;
 8001676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d801      	bhi.n	8001682 <HAL_GPIO_Init+0x13a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	e001      	b.n	8001686 <HAL_GPIO_Init+0x13e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d802      	bhi.n	8001694 <HAL_GPIO_Init+0x14c>
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x152>
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	3b08      	subs	r3, #8
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	210f      	movs	r1, #15
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	6a39      	ldr	r1, [r7, #32]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80b1 	beq.w	800182a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c8:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x2b8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <HAL_GPIO_Init+0x2b8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_GPIO_Init+0x2b8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e0:	4a48      	ldr	r2, [pc, #288]	; (8001804 <HAL_GPIO_Init+0x2bc>)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a40      	ldr	r2, [pc, #256]	; (8001808 <HAL_GPIO_Init+0x2c0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <HAL_GPIO_Init+0x1ec>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3f      	ldr	r2, [pc, #252]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00d      	beq.n	8001730 <HAL_GPIO_Init+0x1e8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d007      	beq.n	800172c <HAL_GPIO_Init+0x1e4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <HAL_GPIO_Init+0x2cc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d101      	bne.n	8001728 <HAL_GPIO_Init+0x1e0>
 8001724:	2303      	movs	r3, #3
 8001726:	e006      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001728:	2304      	movs	r3, #4
 800172a:	e004      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 800172c:	2302      	movs	r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001734:	2300      	movs	r3, #0
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	f002 0203 	and.w	r2, r2, #3
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	4093      	lsls	r3, r2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001746:	492f      	ldr	r1, [pc, #188]	; (8001804 <HAL_GPIO_Init+0x2bc>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	492c      	ldr	r1, [pc, #176]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	4928      	ldr	r1, [pc, #160]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4922      	ldr	r1, [pc, #136]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	491e      	ldr	r1, [pc, #120]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4918      	ldr	r1, [pc, #96]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4914      	ldr	r1, [pc, #80]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d021      	beq.n	800181c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	490e      	ldr	r1, [pc, #56]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
 80017e4:	e021      	b.n	800182a <HAL_GPIO_Init+0x2e2>
 80017e6:	bf00      	nop
 80017e8:	10320000 	.word	0x10320000
 80017ec:	10310000 	.word	0x10310000
 80017f0:	10220000 	.word	0x10220000
 80017f4:	10210000 	.word	0x10210000
 80017f8:	10120000 	.word	0x10120000
 80017fc:	10110000 	.word	0x10110000
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	40010800 	.word	0x40010800
 800180c:	40010c00 	.word	0x40010c00
 8001810:	40011000 	.word	0x40011000
 8001814:	40011400 	.word	0x40011400
 8001818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_GPIO_Init+0x304>)
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	43db      	mvns	r3, r3
 8001824:	4909      	ldr	r1, [pc, #36]	; (800184c <HAL_GPIO_Init+0x304>)
 8001826:	4013      	ands	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	3301      	adds	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f ae8e 	bne.w	800155c <HAL_GPIO_Init+0x14>
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	372c      	adds	r7, #44	; 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40010400 	.word	0x40010400

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43d9      	mvns	r1, r3
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	400b      	ands	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e272      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e24c      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f976 	bl	8000c80 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f972 	bl	8000c80 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e200      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f962 	bl	8000c80 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff f95e 	bl	8000c80 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1ec      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1c0      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f917 	bl	8000c80 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff f913 	bl	8000c80 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1a1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8f6 	bl	8000c80 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8f2 	bl	8000c80 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e180      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f8d6 	bl	8000c80 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f8d2 	bl	8000c80 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e160      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 faa6 	bl	8002048 <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff f8bc 	bl	8000c80 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f8b8 	bl	8000c80 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e146      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a87      	ldr	r2, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f879 	bl	8000c80 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff f875 	bl	8000c80 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e103      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f829 	bl	8000c80 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff f825 	bl	8000c80 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0b1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f813 	bl	8000c80 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f80f 	bl	8000c80 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e09b      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7fe ffe3 	bl	8000c80 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7fe ffdf 	bl	8000c80 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e06d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4921      	ldr	r1, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe ffb3 	bl	8000c80 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe ffaf 	bl	8000c80 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e03d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e035      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff9c 	bl	8000c80 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe ff98 	bl	8000c80 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e026      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e01e      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e019      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x500>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe feea 	bl	8000c80 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7fe fee6 	bl	8000c80 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fe48 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08002a4c 	.word	0x08002a4c
 8001f84:	200000a4 	.word	0x200000a4
 8001f88:	200000a8 	.word	0x200000a8

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b490      	push	{r4, r7}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f94:	1d3c      	adds	r4, r7, #4
 8001f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f9c:	f240 2301 	movw	r3, #513	; 0x201
 8001fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001fca:	e02b      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e02b      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3328      	adds	r3, #40	; 0x28
 8001fdc:	443b      	add	r3, r7
 8001fde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	0c5b      	lsrs	r3, r3, #17
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	3328      	adds	r3, #40	; 0x28
 8001ffa:	443b      	add	r3, r7
 8001ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002006:	fb03 f202 	mul.w	r2, r3, r2
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	623b      	str	r3, [r7, #32]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6a3b      	ldr	r3, [r7, #32]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc90      	pop	{r4, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	08002a3c 	.word	0x08002a3c
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	003d0900 	.word	0x003d0900

08002048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <RCC_Delay+0x34>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <RCC_Delay+0x38>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a5b      	lsrs	r3, r3, #9
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002064:	bf00      	nop
  }
  while (Delay --);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	60fa      	str	r2, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f9      	bne.n	8002064 <RCC_Delay+0x1c>
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	200000a4 	.word	0x200000a4
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fd46 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fa70 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e03a      	b.n	80021b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_TIM_Base_Start_IT+0x98>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d009      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b06      	cmp	r3, #6
 800218c:	d010      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	e007      	b.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0202 	mvn.w	r2, #2
 80021f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f9b1 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9a4 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f9b3 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0204 	mvn.w	r2, #4
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f987 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f97a 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f989 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b08      	cmp	r3, #8
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0208 	mvn.w	r2, #8
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f95d 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f950 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f95f 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d122      	bne.n	8002320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d11b      	bne.n	8002320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0210 	mvn.w	r2, #16
 80022f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2208      	movs	r2, #8
 80022f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f933 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 800230c:	e005      	b.n	800231a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f926 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f935 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0201 	mvn.w	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe faa0 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b80      	cmp	r3, #128	; 0x80
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	2b80      	cmp	r3, #128	; 0x80
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa77 	bl	8002866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8f9 	bl	8002596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0220 	mvn.w	r2, #32
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa42 	bl	8002854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x18>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0b3      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x180>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002416:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002428:	d03e      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0xd0>
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	f200 8087 	bhi.w	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	f000 8085 	beq.w	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d87f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d01a      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xa2>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d87b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002448:	2b60      	cmp	r3, #96	; 0x60
 800244a:	d050      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x116>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d877      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002450:	2b50      	cmp	r3, #80	; 0x50
 8002452:	d03c      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xf6>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d873      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d058      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x136>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d86f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d064      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x156>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d86b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d060      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x156>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d867      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x156>
 8002474:	2b10      	cmp	r3, #16
 8002476:	d05a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002478:	e062      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f000 f966 	bl	800275a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800249c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	609a      	str	r2, [r3, #8]
      break;
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f000 f94f 	bl	800275a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ca:	609a      	str	r2, [r3, #8]
      break;
 80024cc:	e03b      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 f8c6 	bl	800266c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2150      	movs	r1, #80	; 0x50
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f91d 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 80024ec:	e02b      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f8e4 	bl	80026c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2160      	movs	r1, #96	; 0x60
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f90d 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 800250c:	e01b      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 f8a6 	bl	800266c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f8fd 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 800252c:	e00b      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f000 f8f4 	bl	8002726 <TIM_ITRx_SetConfig>
        break;
 800253e:	e002      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002544:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a29      	ldr	r2, [pc, #164]	; (8002660 <TIM_Base_SetConfig+0xb8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a26      	ldr	r2, [pc, #152]	; (8002664 <TIM_Base_SetConfig+0xbc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <TIM_Base_SetConfig+0xb8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <TIM_Base_SetConfig+0xbc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <TIM_Base_SetConfig+0xb8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800

0800266c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f023 0201 	bic.w	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 030a 	bic.w	r3, r3, #10
 80026a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f023 0210 	bic.w	r2, r3, #16
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	f043 0307 	orr.w	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	609a      	str	r2, [r3, #8]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800275a:	b480      	push	{r7}
 800275c:	b087      	sub	sp, #28
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002774:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	431a      	orrs	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4313      	orrs	r3, r2
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	609a      	str	r2, [r3, #8]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e046      	b.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d009      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10c      	bne.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800

08002854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2600      	movs	r6, #0
 800287c:	4d0c      	ldr	r5, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f830 	bl	80028ec <_init>
 800288c:	2600      	movs	r6, #0
 800288e:	4d0a      	ldr	r5, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002a5c 	.word	0x08002a5c
 80028b4:	08002a5c 	.word	0x08002a5c
 80028b8:	08002a5c 	.word	0x08002a5c
 80028bc:	08002a60 	.word	0x08002a60

080028c0 <memcpy>:
 80028c0:	440a      	add	r2, r1
 80028c2:	4291      	cmp	r1, r2
 80028c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80028c8:	d100      	bne.n	80028cc <memcpy+0xc>
 80028ca:	4770      	bx	lr
 80028cc:	b510      	push	{r4, lr}
 80028ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028d2:	4291      	cmp	r1, r2
 80028d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028d8:	d1f9      	bne.n	80028ce <memcpy+0xe>
 80028da:	bd10      	pop	{r4, pc}

080028dc <memset>:
 80028dc:	4603      	mov	r3, r0
 80028de:	4402      	add	r2, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <_init>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr

080028f8 <_fini>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr
